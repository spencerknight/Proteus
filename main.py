import requests
import time
import os
import numpy
import sys
import string
"http://web.expasy.org/cgi-bin/peptide_cutter/peptidecutter.pl"
pride_serv = 'http://www.ebi.ac.uk/pride/cluster/#/list?q=SSA&page=1&size=20#api-v1'
to_read = 'http://brunov.org/2009/04/chopping-proteins-with-moose.html'
pops_ws = 'http://pops.csse.monash.edu.au/programs.php'
protein_table_cut = 'http://www.proteinsandproteomics.org/content/free/tables_1/table11.pdf'
data_michael = '/data/projects/proteus/data_michael'


def get_sequence(folder, aa_rep, gene_code):
    """
    retrieve amino acid sequence modified by "modif" in fasta generated by michael
    :param folder: fasta folder
    :param aa_rep: amino acid replacing the stop codon
    :param gene_code: identifier of the gene
    :return: amino acid sequence if found or empty sequence
    """

    target_file = '0'
    out_seq = []
    for path, subdirs, files in os.walk(folder):
        for filename in files:
            name_f, ext_f = os.path.splitext(filename)
            if ext_f == '.fa' and name_f[-1] == aa_rep:
                target_file = os.path.join(path, filename)
                print "found target file", name_f
    if target_file != '0':
        h = open(target_file, 'r')
        all_lines = h.readlines()
        n_lines = len(all_lines)
        for line, i in zip(all_lines, range(0, n_lines)):
            if line[0] == '>' and gene_code in line:
                print line
                print all_lines[i + 1]
                try:
                    out_seq.append((all_lines[i + 1], line))
                except IndexError:
                    print "problem with file format!"
                    t = 0
    else:
        print "Can't find target file"
    if out_seq != []:
        print "found target sequence"
    else:
        print "Can't find target sequence"

    return out_seq

def query_pride(pep_seq):
    url = 'http://www.ebi.ac.uk/pride/ws/archive/project/list?query=' + pep_seq + '&speciesFilter=9606'
    response = requests.get(url)
    out = response.json()
    n_res = len(out['list'])
    return out, n_res

def extract_seq_fa(file,):
    h = open(file, "r")
    all_lines = h.readlines()
    seq = all_lines[1].replace('\n', '')
    print "Seq length = ", len(seq)
    return seq

def generate_frag(protease_file, seq, thresh_cut):
    h = open(protease_file, "r")
    all_lines = h.readlines()
    l = all_lines[0].replace('\n', '')
    dat = l.split(')')
    list_split_pos = []
    for ele in dat:
        if ele != '':
            tmp = ele.replace(' ', '').split('(')
            list_split_pos.append((int(tmp[0]), float(tmp[1].replace('%', ''))))

    list_split_pos.reverse()
    seq_copy = [ele for ele in seq]
    list_frags = []
    for ele in list_split_pos:
        pos_cut, proba_cut = ele
        if proba_cut >= thresh_cut:
            frag_tmp = seq_copy[pos_cut:]
            # seq_copy = seq_copy[:pos_cut - 1]
            # print "len seq copy = ", len(seq_copy)
            frag = string.join(frag_tmp, '')
            if len(frag) > 5:
                list_frags.append((frag, pos_cut))
                seq_copy = seq_copy[:pos_cut - 1]
    print "Frags = ", list_frags
    print "n frags = ", len(list_frags)
    return list_frags

if __name__ == "__main__":
    # tryp_file = "trypsin.txt"
    # chymo_file = "chymotrypsin.txt"
    # fasta_file = "XM_005264320W.fa"
    # seq = extract_seq_fa(fasta_file)
    #
    # out = "res.txt"
    # ho = open(out, "w")
    # t0 = time.time()
    # n_queries = 0.0
    # for p in [chymo_file, tryp_file]:
    #
    #     l_frags = generate_frag(p, seq, 0)
    #     ho.write("protease = %s\n"%(p.replace(".txt", '')))
    #     ho.write("seq\tpos\tn hits\n")
    #     for ele in l_frags:
    #         out, n_res = query_pride(ele[0])
    #         n_queries += 1.0
    #         print "seq = %s pos = %s n hits = %s"%(ele[0], str(ele[1]), str(n_res))
    #         ho.write("%s\t%s\t%s\n"%(ele[0], str(ele[1]), str(n_res)))
    # ho.close()
    # print "elapsed time / query = ", (time.time() - t0) / n_queries

    target_seq = get_sequence(data_michael, 'W', 'XM_940657')
